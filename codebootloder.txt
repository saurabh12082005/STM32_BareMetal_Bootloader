#include <stdint.h>

// Manually Defined Addresses for STM32F401VE
#define RCC_BASE_ADDR       0x40023800U
#define GPIOB_BASE_ADDR     0x40020400U
#define GPIOC_BASE_ADDR     0x40020800U
#define SCB_BASE_ADDR       0xE000ED00U
#define APP_START_ADDRESS   0x08008000U

#define RCC_AHB1ENR     (*(volatile uint32_t*)(RCC_BASE_ADDR + 0x30U))
#define RCC_CR          (*(volatile uint32_t*)(RCC_BASE_ADDR + 0x00U))
#define RCC_CFGR        (*(volatile uint32_t*)(RCC_BASE_ADDR + 0x08U))
#define GPIOB_MODER     (*(volatile uint32_t*)(GPIOB_BASE_ADDR + 0x00U))
#define GPIOB_BSRR      (*(volatile uint32_t*)(GPIOB_BASE_ADDR + 0x18U))
#define GPIOC_MODER     (*(volatile uint32_t*)(GPIOC_BASE_ADDR + 0x00U))
#define GPIOC_ODR       (*(volatile uint32_t*)(GPIOC_BASE_ADDR + 0x14U))
#define SCB_VTOR        (*(volatile uint32_t*)(SCB_BASE_ADDR + 0x08U))

// LCD Driver Functions
void delay_ms(volatile uint32_t ms) { volatile uint32_t count = ms * 1600; while(count--); }
static void LCD_EnablePulse(void) { GPIOB_BSRR = (1U << 1); delay_ms(1); GPIOB_BSRR = (1U << 17); delay_ms(1); }
static void LCD_SendCommand(uint8_t cmd) { GPIOB_BSRR = (1U << 16); GPIOC_ODR = (GPIOC_ODR & 0xFF00) | cmd; LCD_EnablePulse(); }
static void LCD_SendData(uint8_t data) { GPIOB_BSRR = (1U << 0); GPIOC_ODR = (GPIOC_ODR & 0xFF00) | data; LCD_EnablePulse(); }
void LCD_Init(void) { RCC_AHB1ENR |= (1U << 1) | (1U << 2); GPIOC_MODER = (GPIOC_MODER & 0xFFFF0000) | 0x00005555; GPIOB_MODER = (GPIOB_MODER & 0xFFFFFFF0) | 0x00000005; delay_ms(20); LCD_SendCommand(0x38); LCD_SendCommand(0x0C); LCD_SendCommand(0x06); LCD_SendCommand(0x01); delay_ms(2); }
void LCD_WriteString(const char* str) { while (*str) { LCD_SendData(*str++); } }

// Robust Jump Function
void jump_to_application(void) {
    if (((*(volatile uint32_t*)APP_START_ADDRESS) & 0x2FFE0000) != 0x20000000) {
        LCD_WriteString(" No App!"); while(1);
    }
    uint32_t app_entry_point = *(volatile uint32_t*)(APP_START_ADDRESS + 4);
    void (*app_reset_handler)(void) = (void*)app_entry_point;
    __asm volatile ("cpsid i");
    RCC_CR |= (1U << 0);
    RCC_CFGR = 0x00000000;
    RCC_CR &= ~((1U << 24) | (1U << 16));
    SCB_VTOR = APP_START_ADDRESS;
    __asm volatile ("mov sp, %0" : : "r" (*(volatile uint32_t*)APP_START_ADDRESS));
    app_reset_handler();
}

// Main Function
int main(void) {
    LCD_Init();
    LCD_WriteString("Bootloader...");
    delay_ms(3000);
    jump_to_application();
    return 0;
}
